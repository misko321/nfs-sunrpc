/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include <iostream>
#include "nfs.h"

static CLIENT *clnt;

void init_clnt(char *host) {
	#ifndef	DEBUG
		clnt = clnt_create (host, NFS_PROGRAM, NFS_VERSION_1, "udp");
		if (clnt == NULL) {
			clnt_pcreateerror (host);
			exit (1);
		}
	#endif	/* DEBUG */
}

void destroy_clnt() {
	#ifndef	DEBUG
		clnt_destroy (clnt);
	#endif	 /* DEBUG */
}

char *ls_cmd(std::string ls_1_str) {
	char **result = ls_1((char *) ls_1_str.c_str(), clnt);
	if (result == (char **) NULL) {
		clnt_perror (clnt, "call failed");
	}

	return *result;
}

int create_cmd(std::string create_1_filename) {
	int *result = create_1((char *) create_1_filename.c_str(), clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if (*result == E_FILENAME_INVALID)
		std::cout << "ERROR: Filename '" << create_1_filename << "' is invalid.\n";
	else if (*result == E_FILE_EXISTS)
		std::cout << "ERROR: File '" << create_1_filename << "' already exists.\n";

	return *result;
}

int delete_cmd(std::string delete_1_filename) {
	int *result = delete_1((char *) delete_1_filename.c_str(), clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if (*result == E_FILENAME_INVALID)
		std::cout << "ERROR: Filename '" << delete_1_filename << "' is invalid.\n";
	else if (*result == E_FILE_NOT_EXISTS)
		std::cout << "ERROR: File '" << delete_1_filename << "' does not exist.\n";

	return *result;
}


// char *
// nfs_program_1(char *host, char *ls_1_str)
// {
// 	// CLIENT *clnt;
// 	char * *result;
// 	int  *result;
// 	int  *result;
// 	char create_1_filename[10] = "abc.txt";
// 	char delete_1_filename[10] = "abc.txt";
//
//
// 	// char *ls_1_str;
//
// 	result = ls_1(ls_1_str, clnt);
// 	if (result == (char **) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
//
// 	result = create_1(create_1_filename, clnt);
// 	if (result == (int *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	if (*result == E_FILENAME_INVALID)
// 		std::cout << "ERROR: Filename '" << create_1_filename << "' is invalid.\n";
// 	else if (*result == E_FILE_EXISTS)
// 		std::cout << "ERROR: File '" << create_1_filename << "' already exists.\n";
//
// 	result = delete_1(delete_1_filename, clnt);
// 	if (result == (int *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	if (*result == E_FILENAME_INVALID)
// 		std::cout << "ERROR: Filename '" << create_1_filename << "' is invalid.\n";
// 	else if (*result == E_FILE_NOT_EXISTS)
// 		std::cout << "ERROR: File '" << create_1_filename << "' does not exist.\n";
//
// 	return *result;
// }



void read_command()
{
	//TODO refactor
  std::string command;

  std::cout << "> ";
	fflush(stdin);
  std::cin >> command;

  if (command.compare("ls") == 0) {
		std::string location;
		if (std::cin.peek() == '\n') { 	//check if next character is newline
      location = "."; 							//and assign the default
    } else {
        std::cin >> location;
    }

		char *result = ls_cmd(location);
		std::cout << std::endl << result << std::endl;

	} else if (command.compare("create") == 0) {
		std::string filename;
		if (std::cin.peek() == '\n') { 	//check if next character is newline
      std::cout << "You must give a filename: create <filename>\n";
    } else {
      std::cin >> filename;
      create_cmd(filename);
    }
  } else if (command.compare("delete") == 0) {
		std::string filename;
		if (std::cin.peek() == '\n') { 	//check if next character is newline
      std::cout << "You must give a filename: delete <filename>\n";
    } else {
      std::cin >> filename;
      delete_cmd(filename);
    }
  } else if (command.compare("exit") == 0) {
		exit(0);
  }
  // } else {
  //     return -1;
  // }
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s <server_host>\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	init_clnt(host);

	// char *result = nfs_program_1 (host, "null");
	while(true)
		read_command();
	// std::cout << result;

	destroy_clnt();
exit (0);
}
